//
//  WebShellDebug.swift
//  WebShell
//
//  Created by Wesley de Groot on 31-01-16.
//  Copyright Â© 2016 RandyLu. All rights reserved.
//

import Foundation
import WebKit
// This is generated by swift, i dont know the reason,
// but i'm not removing it.
fileprivate func < <T : Comparable>(lhs: T?, rhs: T?) -> Bool {
  switch (lhs, rhs) {
  case let (l?, r?):
    return l < r
  case (nil, _?):
    return true
  default:
    return false
  }
}

fileprivate func > <T : Comparable>(lhs: T?, rhs: T?) -> Bool {
  switch (lhs, rhs) {
  case let (l?, r?):
    return l > r
  default:
    return rhs < lhs
  }
}


// @wdg Add Debug support
// Issue: None.
// This extension will handle the Debugging options.
extension ViewController {

	/**
     Override settings via commandline
 
     Used for popups, and debug options.
     */
	func checkSettings() -> Void {
		// Need to overwrite settings?
		if (CommandLine.argc > 0) {
			for i in stride(from: 1, to: Int(CommandLine.argc), by: 2) {
//            for (var i = 1; i < Int(Process.argc) ; i = i + 2) {
                if ((String(describing: CommandLine.arguments[i])) == "-NSDocumentRevisionsDebugMode") {
					if ((String(describing: CommandLine.arguments[i + 1])) == "YES") {
						WebShellSettings["debugmode"] = true
						WebShellSettings["consoleSupport"] = true
					}
				}
                
				if ((String(describing: Process().arguments?[i])).uppercased() == "-DEBUG") {
					if ((String(describing: Process().arguments![i + 1])).uppercased() == "YES" || (String(describing: Process().arguments?[i + 1])).uppercased() == "true") {
						WebShellSettings["debugmode"] = true
						WebShellSettings["consoleSupport"] = true
					}
				}

				if ((String(describing: CommandLine.arguments[i])) == "-dump-args") {
					self._debugDumpArguments("" as AnyObject)
				}

				if ((String(describing: CommandLine.arguments[i])) == "-url") {
					WebShellSettings["url"] = String(CommandLine.arguments[i + 1])
				}

				if ((String(describing: CommandLine.arguments[i])) == "-height") {
					WebShellSettings["initialWindowHeight"] = (Int(CommandLine.arguments[i + 1]) > 250) ? Int(CommandLine.arguments[i + 1]) : Int(250)
				}

				if ((String(describing: CommandLine.arguments[i])) == "-width") {
					WebShellSettings["initialWindowWidth"] = (Int(CommandLine.arguments[i + 1]) > 250) ? Int(CommandLine.arguments[i + 1]) : Int(250)
				}
			}
		}

		initWindow()
	}

    /**
     Edit contextmenu...
     
     @wdg Fix contextmenu (problem with the swift 3 update)
     
     Issue: #61
     */
    func webView(_ sender: WebView!, contextMenuItemsForElement element: [AnyHashable : Any]!, defaultMenuItems: [Any]!) -> [Any]! {
        //Swift 2..
        //func webView(_ sender: WebView!, contextMenuItemsForElement element: [NSObject: Any]!, defaultMenuItems: [Any]!) -> [Any]!
        
		// @wdg Fix contextmenu (problem with the swift 2 update #50)
		// Issue: #51
		var download = false

		for i in defaultMenuItems {
			// Oh! download link available!
			if (String(describing: (i as AnyObject).title).contains("Download")) {
				download = true
			}

			// Get inspect element!
            if (String(describing: (i as AnyObject).title).contains("Element")) {
				for x in 0 ..< defaultMenuItems.count {
					if (String(describing: defaultMenuItems[x]).contains("Element")) {
						IElement = defaultMenuItems[x] as! NSMenuItem
					}
				}
			}
		}

		var NewMenu: [AnyObject] = [AnyObject]()
		let contextMenu = WebShellSettings["Contextmenu"] as! [String: Bool]

		// if can back
		if (contextMenu["BackAndForward"]!) {
			if (mainWebview.canGoBack) {
				NewMenu.append(NSMenuItem.init(title: "Back", action: #selector(ViewController._goBack(_:)), keyEquivalent: ""))
			}
			if (mainWebview.canGoForward) {
				NewMenu.append(NSMenuItem.init(title: "Forward", action: #selector(ViewController._goForward(_:)), keyEquivalent: ""))
			}
		}
		if (contextMenu["Reload"]!) {
			NewMenu.append(NSMenuItem.init(title: "Reload", action: #selector(ViewController._reloadPage(_:)), keyEquivalent: ""))
		}

		if (download) {
			if (element["WebElementLinkURL"] != nil) {
				lastURL = element["WebElementLinkURL"]! as! URL

                if (contextMenu["Download"]! || contextMenu["newWindow"]!) {
					NewMenu.append(NSMenuItem.separator())

					if (contextMenu["newWindow"]!) {
						NewMenu.append(NSMenuItem.init(title: "Open Link in a new Window", action: #selector(ViewController.createNewInstance(_:)), keyEquivalent: ""))
					}
					if (contextMenu["Download"]!) {
						NewMenu.append(NSMenuItem.init(title: "Download Linked File", action: #selector(ViewController.downloadFileWithURL(_:)), keyEquivalent: ""))
					}
				}
			}
		}

		NewMenu.append(NSMenuItem.separator())
		// Add debug menu. (if enabled)

        if (WebShellSettings["debugmode"] as! Bool) {
			let debugMenu = NSMenu(title: "Debug")
            if (IElement.title != "NSMenuItem") {
                debugMenu.addItem(IElement) // <-- Inspect element...
            }
			debugMenu.addItem(NSMenuItem.init(title: "Open New window", action: #selector(ViewController._debugNewWindow(_:)), keyEquivalent: ""))
			debugMenu.addItem(NSMenuItem.init(title: "Print arguments", action: #selector(ViewController._debugDumpArguments(_:)), keyEquivalent: ""))
			debugMenu.addItem(NSMenuItem.init(title: "Open URL", action: #selector(ViewController._openURL(_:)), keyEquivalent: ""))
			debugMenu.addItem(NSMenuItem.init(title: "Report an issue on this page", action: #selector(ViewController._reportThisPage(_:)), keyEquivalent: ""))
			debugMenu.addItem(NSMenuItem.init(title: "Print this page", action: #selector(ViewController._printThisPage(_:)), keyEquivalent: "")) // Stupid swift 2.2 does not look in extensions.
			debugMenu.addItem(NSMenuItem.separator())
			debugMenu.addItem(NSMenuItem.init(title: "Fire some random Notifications", action: #selector(ViewController.__sendNotifications(_:)), keyEquivalent: ""))
			debugMenu.addItem(NSMenuItem.init(title: "Reset localstorage", action: #selector(ViewController.resetLocalStorage(_:)), keyEquivalent: ""))
            
            let WSdeveloperMenu = NSMenu(title: "WS Developer")
                WSdeveloperMenu.addItem(NSMenuItem.init(title: "Inject Javascript", action: #selector(ViewController._injectJS(_:)), keyEquivalent: ""))
                WSdeveloperMenu.addItem(NSMenuItem.init(title: "What the web can do", action: #selector(ViewController._WWCDT(_:)), keyEquivalent: ""))
            
            let WSDevMenu = NSMenuItem.init(title: "WebShell Developer", action: #selector(ViewController._doNothing(_:)), keyEquivalent: "")
            WSDevMenu.submenu = WSdeveloperMenu
            debugMenu.addItem(WSDevMenu)
            
			let item = NSMenuItem.init(title: "Debug", action: #selector(ViewController._doNothing(_:)), keyEquivalent: "")
			item.submenu = debugMenu

			NewMenu.append(item)
			NewMenu.append(NSMenuItem.separator())
		}
        
		NewMenu.append(NSMenuItem.init(title: "Quit", action: #selector(ViewController._quit(_:)), keyEquivalent: ""))

		return NewMenu
	}

    /**
     Debug: Quit WebShell
     
     - Parameter Sender: Anyobject
     */

	@objc func _quit(_ Sender: AnyObject) -> Void {
		exit(0)
	}

    /**
     Debug: doNothing
     
     - Parameter Sender: Anyobject
     */
	@objc func _doNothing(_ Sender: AnyObject) -> Void {
		// _doNothing
	}

    /**
     Debug: Open new window
     
     - Parameter Sender: Anyobject
     */
	@objc func _debugNewWindow(_ Sender: AnyObject) -> Void {
		openNewWindow(url: "https://www.google.nl/search?client=WebShell&rls=en&q=new+window", height: "0", width: "0")
	}

    /**
     Debug: Print arguments
     
     - Parameter Sender: Anyobject
     */
	@objc func _debugDumpArguments(_ Sender: AnyObject) -> Void {
		print(CommandLine.arguments)
	}

    /**
     Debug: Fire 10 notifications (Timer)
     
     - Parameter Sender: Anyobject
     */
	@objc func __sendNotifications(_ Sender: AnyObject) -> Void {
		// Minimize app
		NSApplication.shared.keyWindow?.miniaturize(self)

		// Fire 10 Notifications
		Timer.scheduledTimer(timeInterval: TimeInterval(05), target: self, selector: #selector(ViewController.___sendNotifications), userInfo: nil, repeats: false)
		Timer.scheduledTimer(timeInterval: TimeInterval(15), target: self, selector: #selector(ViewController.___sendNotifications), userInfo: nil, repeats: false)
		Timer.scheduledTimer(timeInterval: TimeInterval(25), target: self, selector: #selector(ViewController.___sendNotifications), userInfo: nil, repeats: false)
		Timer.scheduledTimer(timeInterval: TimeInterval(35), target: self, selector: #selector(ViewController.___sendNotifications), userInfo: nil, repeats: false)
		Timer.scheduledTimer(timeInterval: TimeInterval(45), target: self, selector: #selector(ViewController.___sendNotifications), userInfo: nil, repeats: false)
		Timer.scheduledTimer(timeInterval: TimeInterval(55), target: self, selector: #selector(ViewController.___sendNotifications), userInfo: nil, repeats: false)
		Timer.scheduledTimer(timeInterval: TimeInterval(65), target: self, selector: #selector(ViewController.___sendNotifications), userInfo: nil, repeats: false)
        Timer.scheduledTimer(timeInterval: TimeInterval(75), target: self, selector: #selector(ViewController.___sendNotifications), userInfo: nil, repeats: false)
		Timer.scheduledTimer(timeInterval: TimeInterval(85), target: self, selector: #selector(ViewController.___sendNotifications), userInfo: nil, repeats: false)
		Timer.scheduledTimer(timeInterval: TimeInterval(95), target: self, selector: #selector(ViewController.___sendNotifications), userInfo: nil, repeats: false)
	}

    /**
     Debug: Send 10 Notifications (real sending)
     
     - Parameter Sender: Anyobject
     */
	@objc func ___sendNotifications() -> Void {
		// Minimize app
		if (NSApplication.shared.keyWindow?.isMiniaturized == false) {
			NSApplication.shared.keyWindow?.miniaturize(self)
		}

		// Send Actual notification.
		makeNotification("Test Notification", message: "Hi!", icon: "https://camo.githubusercontent.com/ee999b2d8fa5413229fdc69e0b53144f02b7b840/687474703a2f2f376d6e6f79372e636f6d312e7a302e676c622e636c6f7564646e2e636f6d2f7765627368656c6c2f6c6f676f2e706e673f696d616765566965772f322f772f313238")
	}

    /**
     Debug: Open URL
     
     - Parameter Sender: Anyobject
     */
	@objc func _openURL(_ Sender: AnyObject) -> Void {
		let msg = NSAlert()
		msg.addButton(withTitle: "OK") // 1st button
		msg.addButton(withTitle: "Cancel") // 2nd button
		msg.messageText = "URL"
		msg.informativeText = "Where you need to go?"

		let txt = NSTextField(frame: NSRect(x: 0, y: 0, width: 200, height: 24))
		txt.stringValue = "http://"

		msg.accessoryView = txt
		let response: NSApplication.ModalResponse = msg.runModal()

		if (response == NSApplication.ModalResponse.alertFirstButtonReturn) {
			self.loadUrl(txt.stringValue)
		}
	}

    /**
     Debug: WhatTheWebCanDo.Today
     
     - Parameter Sender: Anyobject
     */
    @objc func _WWCDT(_ Sender: AnyObject) -> Void {
        self.loadUrl("https://whatwebcando.today")
    }
    
    /**
     Debug: Inject custom javascript
     
     - Parameter Sender: Anyobject
     */
    @objc func _injectJS(_ Sender: AnyObject) -> Void {
        let msg = NSAlert()
        msg.addButton(withTitle: "OK") // 1st button
        msg.addButton(withTitle: "Cancel") // 2nd button
        msg.messageText = "Inject Javascript"
        msg.informativeText = "Inject Javascript\nBe Carefull!"
        
        let txt = NSTextField(frame: NSRect(x: 0, y: 0, width: 400, height: 400))
            txt.stringValue = ""
            txt.translatesAutoresizingMaskIntoConstraints = true
        
        msg.accessoryView = txt
        let response: NSApplication.ModalResponse = msg.runModal()
        
        if (response == NSApplication.ModalResponse.alertFirstButtonReturn) {
            let JSReturn: String = mainWebview.stringByEvaluatingJavaScript(from: txt.stringValue)
            
            let RetVal = NSAlert()
                RetVal.addButton(withTitle: "OK")
                RetVal.messageText = "Injected Javascript"
                RetVal.informativeText = JSReturn != "" ? JSReturn : "Finished"
                RetVal.runModal()
        }
    }
    
    /**
     Debug: Report this page, as containing an error.
     
     - Parameter Sender: Anyobject
     */
	@objc func _reportThisPage(_ Sender: AnyObject) -> Void {
		let currentUrl: String = (mainWebview.mainFrame.dataSource?.request.url?.absoluteString)!
		let host: String = (mainWebview.mainFrame.dataSource?.request.url?.host)!

		let issue: String = String("Problem loading \(host)").addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)!.replacingOccurrences(of: "&", with: "%26")
		var body: String = (String("There is a problem loading \(currentUrl)").addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)?.replacingOccurrences(of: "&", with: "%26"))!
		body.append("%0D%0AThe%20problem%20is%3A%0D%0A...")

		let url: String = "https://github.com/djyde/WebShell/issues/new?title=\(issue)&body=\(body)"

		NSWorkspace.shared.open(URL(string: (url as String))!)
	}

    /**
     Print this page
     
     - Parameter Sender: Anyobject
     
     - Notes Stupid swift 2.2 & 3 does not look in extensions.
     - Notes so we'll copy again...
     - Notes @wdg Add Print Support
     - Notes Issue: #39
     */
	@objc func _printThisPage(_ Sender: AnyObject? = nil) -> Void {
		let url = mainWebview.mainFrame.dataSource?.request?.url?.absoluteString

		let operation: NSPrintOperation = NSPrintOperation.init(view: mainWebview)
		operation.jobTitle = "Printing \(url!)"

		// If want to print landscape
		operation.printInfo.orientation = NSPrintInfo.PaperOrientation.landscape
		operation.printInfo.scalingFactor = 0.7

		if operation.run() {
			print("Printed?")
		}
	}

    /**
     Go Back
     
     - Parameter Sender: Anyobject
     */
	@objc func _goBack(_ Sender: AnyObject) -> Void {
		if (mainWebview.canGoBack) {
			mainWebview.goBack(Sender)
		}
	}

    /**
     Go Forward
     
     - Parameter Sender: Anyobject
     */
	@objc func _goForward(_ Sender: AnyObject) -> Void {
		if (mainWebview.canGoForward) {
			mainWebview.goForward(Sender)
		}
	}

    /**
     Reload page
     
     - Parameter Sender: Anyobject
     */
	@objc func _reloadPage(_ Sender: AnyObject) -> Void {
		mainWebview.reload(Sender)
	}

    /**
     Debug: Open in a new window
     
     - Parameter Sender: Anyobject
     */
	@objc func createNewInstance(_ Sender: AnyObject) -> Void {
		openNewWindow(url: "\(lastURL)", height: "0", width: "0")
	}

    /**
     Download file
     
     - Parameter Sender: Anyobject
     */
	@objc func downloadFileWithURL(_ Sender: AnyObject) -> Void {
		let wsDM = WebShelllDownloadManager.init(url: lastURL)
		wsDM.endDownloadTask()
	}
    
    /**
     If in debugmode -> Print
     
     - Parameter S: Any
     */
    func Dprint(_ S: Any) -> Void {
        if (WebShellSettings["debugmode"] as! Bool) {
            print(S)
        }
    }
    
    /**
     If in debugmode -> Dump
     
     - Parameter S: Any
     */
    func Ddump(_ S: Any) -> Void {
        if (WebShellSettings["debugmode"] as! Bool) {
            dump(S)
        }
    }
}
